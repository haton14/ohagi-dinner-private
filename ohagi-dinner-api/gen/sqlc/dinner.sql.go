// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: dinner.sql

package sqlc

import (
	"context"
	"time"
)

const createDinnerAndReturnID = `-- name: CreateDinnerAndReturnID :one
INSERT INTO dinner (created_at, updated_at)
VALUES(?1, ?2)
RETURNING id
`

type CreateDinnerAndReturnIDParams struct {
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateDinnerAndReturnID(ctx context.Context, arg CreateDinnerAndReturnIDParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createDinnerAndReturnID, arg.CreatedAt, arg.UpdatedAt)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getDinner = `-- name: GetDinner :one
SELECT id, created_at, updated_at
FROM dinner
WHERE id = ?1
`

func (q *Queries) GetDinner(ctx context.Context, id int64) (Dinner, error) {
	row := q.db.QueryRowContext(ctx, getDinner, id)
	var i Dinner
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
