// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: food.sql

package sqlc

import (
	"context"
	"time"
)

const createFood = `-- name: CreateFood :exec
INSERT INTO food (name, unit, created_at, updated_at)
VALUES(?, ?, ?, ?)
`

type CreateFoodParams struct {
	Name      string
	Unit      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateFood(ctx context.Context, arg CreateFoodParams) error {
	_, err := q.db.ExecContext(ctx, createFood,
		arg.Name,
		arg.Unit,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const listFood = `-- name: ListFood :many
SELECT id, name, unit, created_at, updated_at
FROM food
`

func (q *Queries) ListFood(ctx context.Context) ([]Food, error) {
	rows, err := q.db.QueryContext(ctx, listFood)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Food
	for rows.Next() {
		var i Food
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Unit,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
